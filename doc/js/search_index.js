var search_data = {"index":{"searchIndex":["renamer","checkfiles()","compact()","compactfile()","compactfolder()","createscript()","new()","regexrename()","regexrenamefile()","regexrenamefolder()","smartrename()","widen()","widenfile()","widenfolder()"],"longSearchIndex":["renamer","renamer#checkfiles()","renamer#compact()","renamer#compactfile()","renamer#compactfolder()","renamer#createscript()","renamer::new()","renamer#regexrename()","renamer#regexrenamefile()","renamer#regexrenamefolder()","renamer#smartrename()","renamer#widen()","renamer#widenfile()","renamer#widenfolder()"],"info":[["ReNameR","","ReNameR.html","","<p>This is the Renamer class.\n<p>It&#39;s supposed to help renaming files in different ways:\n<p>compact &mdash; renames …\n"],["checkFiles","ReNameR","ReNameR.html#method-i-checkFiles","( *files )","<p>Public method: checks if the given files exist, then prints a list of the\nnot found ones and returns …\n"],["compact","ReNameR","ReNameR.html#method-i-compact","( *files )","<p>Public method: checks if the given files exist via checkFiles, then calls\ncompactFile and compactFolder …\n"],["compactFile","ReNameR","ReNameR.html#method-i-compactFile","( file )","<p>Private method, called through compact: renames a single file to a compact\nCamelCase version. This contains …\n"],["compactFolder","ReNameR","ReNameR.html#method-i-compactFolder","( folder )","<p>Private method, called through compact: recursively renames a folder and\nits content to a compact CamelCase …\n"],["createScript","ReNameR","ReNameR.html#method-i-createScript","( *files )","<p>Public method: checks if it&#39;s possible to create a file in the current\ndirectory. If successful, …\n"],["new","ReNameR","ReNameR.html#method-c-new","( config_file )","<p>Constructor: takes the path of the config file as a parameter, and ensures\nit contains the right info. …\n"],["regexRename","ReNameR","ReNameR.html#method-i-regexRename","( *files, regex, with )","<p>Public method: checks if the given files exist via checkFiles, then calls\nregexRenameFile and regexRenameFolder …\n"],["regexRenameFile","ReNameR","ReNameR.html#method-i-regexRenameFile","( file, regex, with )","<p>Private method, called through regexRename: renames a single file using a\ngiven regex. This contains …\n"],["regexRenameFolder","ReNameR","ReNameR.html#method-i-regexRenameFolder","( folder, regex, with )","<p>Private method, called through regexRename: recursively renames a folder \nand its content using a given …\n"],["smartRename","ReNameR","ReNameR.html#method-i-smartRename","( file, new_name )","<p>Public method: will smartly rename a file (Pathname format) to new_name,\npreserving the original path …\n"],["widen","ReNameR","ReNameR.html#method-i-widen","( *files )","<p>Public method: checks if the given files exist via checkFiles, then calls\nwidenFile and widenFolder to …\n"],["widenFile","ReNameR","ReNameR.html#method-i-widenFile","( file )","<p>Private method, called through widen: renames a single file to a wide\nversion. This contains the main …\n"],["widenFolder","ReNameR","ReNameR.html#method-i-widenFolder","( folder )","<p>Private method, called through widen: recursively renames a folder and its\ncontent to a wide name.\n"]]}}